# MPS Connect Production Docker Compose
# Production-ready multi-service deployment

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mps-connect-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mps_connect}
      POSTGRES_USER: ${POSTGRES_USER:-mps_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/immutable_audit.sql:/docker-entrypoint-initdb.d/02-immutable-audit.sql
    ports:
      - "5432:5432"
    networks:
      - mps-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mps_user} -d ${POSTGRES_DB:-mps_connect}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql

  # Redis Cache (for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: mps-connect-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mps-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: mps-connect-api
    restart: unless-stopped
    environment:
      # Database configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-mps_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-mps_connect}
      
      # Security configuration
      SECRET_KEY: ${SECRET_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      
      # Redis configuration
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Application configuration
      ENVIRONMENT: production
      LOG_LEVEL: INFO
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,https://mps-connect.vercel.app}
      
      # Monitoring
      ENABLE_METRICS: true
      METRICS_PORT: 9090
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics port
    networks:
      - mps-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: mps-connect-web
    restart: unless-stopped
    environment:
      API_URL: ${API_URL:-http://api:8000}
      ENVIRONMENT: production
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mps-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mps-connect-proxy
    restart: unless-stopped
    volumes:
      - ./infra/nginx/prod.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "443:443"
      - "80:80"
    networks:
      - mps-network
    depends_on:
      - api
      - web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run

  # Database Migration Service
  migrate:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: mps-connect-migrate
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-mps_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-mps_connect}
    networks:
      - mps-network
    depends_on:
      postgres:
        condition: service_healthy
    command: ["alembic", "upgrade", "head"]
    restart: "no"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: mps-connect-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - mps-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  grafana:
    image: grafana/grafana:latest
    container_name: mps-connect-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - mps-network
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

# Networks
networks:
  mps-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
