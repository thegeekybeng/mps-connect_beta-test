name: Deploy to Cloud Run (cloud_dev)

on:
  push:
    branches:
      - cloud_dev
  pull_request:
    branches:
      - cloud_dev
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION || 'asia-southeast1' }}
  REPO: ${{ secrets.ARTIFACT_REPO || 'mps-connect' }}
  SERVICE: mps-connect-api
  IMAGE_TAG: cloud-dev-${{ github.sha }}

jobs:
  build_pr:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker build (syntax check)
        run: |
          docker build -f Dockerfile -t local/check:latest .

  deploy:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    concurrency:
      group: cloud-run-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validate required secrets and files
        run: |
          : "${PROJECT_ID:?Missing GCP_PROJECT_ID secret}"
          : "${REGION:?Missing GCP_REGION (or default) secret}"
          : "${REPO:?Missing ARTIFACT_REPO (or default) secret}"
          test -f env.yaml || { echo "env.yaml missing in repo root"; exit 1; }

      # Authenticate to Google Cloud - choose one method below
      # Method A: Workload Identity Federation (recommended)
      - name: Auth via Workload Identity Federation
        if: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER && secrets.GCP_SERVICE_ACCOUNT }}
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # Method B: Service Account Key (fallback)
      - name: Auth via Service Account Key
        if: ${{ !secrets.GCP_WORKLOAD_IDENTITY_PROVIDER && secrets.GCP_SA_KEY }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure defaults
        run: |
          gcloud config set project "$PROJECT_ID"
          gcloud config set run/region "${REGION}"

      - name: Enable required services
        run: |
          gcloud services enable \
            run.googleapis.com \
            artifactregistry.googleapis.com \
            cloudbuild.googleapis.com \
            iam.googleapis.com \
            compute.googleapis.com

      - name: Ensure Artifact Registry repo
        run: |
          gcloud artifacts repositories describe "$REPO" --location="$REGION" \
            || gcloud artifacts repositories create "$REPO" \
                 --repository-format=docker \
                 --location="$REGION" \
                 --description="MPS Connect images"

      - name: Build and push image (Cloud Build)
        run: |
          IMAGE_URI="${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${SERVICE}:${IMAGE_TAG}"
          echo "Building and pushing ${IMAGE_URI}"
          gcloud builds submit --tag "$IMAGE_URI" .
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV

      - name: Deploy to Cloud Run
        run: |
          # Grant artifact registry reader to runtime SA (idempotent)
          PROJECT_NUMBER=$(gcloud projects describe "$PROJECT_ID" --format='value(projectNumber)')
          RUNTIME_SA="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
          gcloud projects add-iam-policy-binding "$PROJECT_ID" \
            --member="serviceAccount:${RUNTIME_SA}" \
            --role="roles/artifactregistry.reader" \
            --quiet || true

          # Deploy with env from repo (ensure absolute paths)
          gcloud run deploy "$SERVICE" \
            --image "$IMAGE_URI" \
            --region "$REGION" \
            --allow-unauthenticated \
            --cpu 2 --memory 2Gi --timeout 300 \
            --max-instances 10 \
            --execution-environment gen2 \
            --env-vars-file env.yaml

      - name: Show service URL
        run: |
          URL=$(gcloud run services describe "$SERVICE" --region "$REGION" --format='value(status.url)')
          echo "Service URL: ${URL}"
          echo "SERVICE_URL=${URL}" >> $GITHUB_ENV

      - name: Health check
        run: |
          set -e
          URL="$SERVICE_URL"
          echo "Checking health at ${URL}/healthz"
          for i in {1..30}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "${URL}/healthz" || true)
            echo "Attempt $i: HTTP $CODE"
            if [ "$CODE" = "200" ]; then
              echo "Service healthy"; exit 0; fi
            sleep 5
          done
          echo "Service did not become healthy in time"; exit 1
